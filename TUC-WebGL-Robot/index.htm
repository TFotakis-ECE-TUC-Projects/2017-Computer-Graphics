<!-- TUC Computer Graphics Course Sandbox -->
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <title>TUC Graphics</title>
    <!-- external libraries for matrix calculations and maintenance -->
    <script type="text/javascript" src="sandbox_files/glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="sandbox_files/webgl-utils.js"></script>
    <!-- Code for the vertex shader-->
    <script id="shader-vs" type="x-shader/x-vertex">
    //attributes for the vertex shader (different for every thread/core that will execute a copy of this)
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;
	//ModelView and Projection Matrices
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
	//Variable to be forwarded to the corresponding thread of the fragment shader
    varying vec4 vColor;
	//main function of the vertex shader
	//this code will be copied to many shader cores/threads and executed with the associated
	//data for every vertex (matrices, color, etc)
    void main(void) {
	//Each vertex is multiplied with the ModelView and Projection matrices and created a fragment
	    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
		//Its color is forwarded to the fragment shader
        vColor = aVertexColor;
    }

    </script>
    <!-- Code for the fragment shader-->
    <script id="shader-fs" type="x-shader/x-fragment">
    //necessary code for compatibility
	precision mediump float;
	//Variable coming from the vertex shader
    varying vec4 vColor;
    void main(void) {
	//the fragment gets its color value.
	//in the fragment shader many advanced shading algorithms can be implemented (Phong etc..)
        gl_FragColor = vColor;
    }

    </script>
    <!-- Javascript code for the main functionality of the WebGL application-->
    <script type="text/javascript">
		//the variable that will accommodate the WebGL context
		//every call to the state machine will be done through this variable
		var gl;
		//Initialize WebGL
		function initGL(canvas) {
			try {
				//get a webgl context
				gl = canvas.getContext("experimental-webgl");
				//assign a viewport width and height based on the HTML canvas element properties
				//(check last lines of code)
				gl.viewportWidth = canvas.width;
				gl.viewportHeight = canvas.height;
				//any error is handled here
				//all errors are visible in the console (F12 in Google chrome)
			} catch (e) {
			}
			if (!gl) {
				alert("Could not initialise WebGL, sorry :-(");
			}
		}
		//Find and compile shaders (vertex + fragment shader)
		function getShader(gl, id) {
			//gets the shader scripts (vertex + fragment)
			var shaderScript = document.getElementById(id);
			if (!shaderScript) {
				return null;
			}
			var str = "";
			var k = shaderScript.firstChild;
			while (k) {
				if (k.nodeType == 3) {
					str += k.textContent;
				}
				k = k.nextSibling;
			}
			var shader;
			//create shaders
			if (shaderScript.type == "x-shader/x-fragment") {
				shader = gl.createShader(gl.FRAGMENT_SHADER);
			} else if (shaderScript.type == "x-shader/x-vertex") {
				shader = gl.createShader(gl.VERTEX_SHADER);
			} else {
				return null;
			}
			//ask WebGL to compile shaders
			//we check for errors here too
			//all errors are visible in the console (F12 in Google chrome)
			gl.shaderSource(shader, str);
			gl.compileShader(shader);
			if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
				alert(gl.getShaderInfoLog(shader));
				return null;
			}
			return shader;
		}
		var shaderProgram;
		//Creates a program from a vertex + fragment shader pair
		function initShaders() {
			var fragmentShader = getShader(gl, "shader-fs");
			var vertexShader = getShader(gl, "shader-vs");
			shaderProgram = gl.createProgram();
			gl.attachShader(shaderProgram, vertexShader);
			gl.attachShader(shaderProgram, fragmentShader);
			//link the compiled binaries
			gl.linkProgram(shaderProgram);
			//check for errors, again
			if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
				alert("Could not initialise shaders");
			}
			//activate current program
			//this sandbox has only one shader pair
			//we can have as many as we wish in more complex applications
			gl.useProgram(shaderProgram);
			//Update attributes for the vertex shader
			//attributes are accessible only from the vertex shader
			//if we want accessible data from a fragment shader we can use uniform variables,
			//or varyings that will be forwarded from the vertex shader to the fragment shader
			//Vertex position data
			shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
			gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
			//Vertex color data
			shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
			gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
			//Update uniform variables
			//this variables can be accessed from both the vertex and fragment shader
			shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
			shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
		}
		//ModelView and Projection matrices
		//mat4 comes from the external library
		var mvMatrix = mat4.create();
		var mvMatrixStack = [];
		var pMatrix = mat4.create();
		//The matrix stack operation are implemented below to handle local transformations
		//Push Matrix Operation
		function mvPushMatrix() {
			var copy = mat4.create();
			mat4.set(mvMatrix, copy);
			mvMatrixStack.push(copy);
		}
		//Pop Matrix Operation
		function mvPopMatrix() {
			if (mvMatrixStack.length == 0) {
				throw "Invalid popMatrix!";
			}
			mvMatrix = mvMatrixStack.pop();
		}
		//Sets + Updates matrix uniforms
		function setMatrixUniforms() {
			gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
			gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
		}
		//Rotation function helper
		function degToRad(degrees) {
			return degrees * Math.PI / 180;
		}
		//Vertex, Index and Color Data
		var cubeVertexPositionBuffer; // contains coordinates
		var cubeVertexColorBuffer; //contains color per vertex
		var cubeVertexIndexBuffer; //contains indices for chains of vertices to draw triangles/other geometry
		//Initialize VBOs, IBOs and color
		function initBuffers() {
			//Vertex Buffer Object
			cubeVertexPositionBuffer = gl.createBuffer();
			//Bind buffer to ARRAY_BUFFER
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			vertices = [
				// Front face
				-1.0, -1.0, 1.0,
				1.0, -1.0, 1.0,
				1.0, 1.0, 1.0,
				-1.0, 1.0, 1.0,
				// Back face
				-1.0, -1.0, -1.0,
				-1.0, 1.0, -1.0,
				1.0, 1.0, -1.0,
				1.0, -1.0, -1.0,
				// Top face
				-1.0, 1.0, -1.0,
				-1.0, 1.0, 1.0,
				1.0, 1.0, 1.0,
				1.0, 1.0, -1.0,
				// Bottom face
				-1.0, -1.0, -1.0,
				1.0, -1.0, -1.0,
				1.0, -1.0, 1.0,
				-1.0, -1.0, 1.0,
				// Right face
				1.0, -1.0, -1.0,
				1.0, 1.0, -1.0,
				1.0, 1.0, 1.0,
				1.0, -1.0, 1.0,
				// Left face
				-1.0, -1.0, -1.0,
				-1.0, -1.0, 1.0,
				-1.0, 1.0, 1.0,
				-1.0, 1.0, -1.0
			];
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
			//every item has 3 coordinates (x,y,z)
			cubeVertexPositionBuffer.itemSize = 3;
			//we have 24 vertices
			cubeVertexPositionBuffer.numItems = 24;
			//Color
			cubeVertexColorBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			colors = [
				[1.0, 0.0, 0.0, 1.0], // Front face
				[1.0, 1.0, 0.0, 1.0], // Back face
				[0.0, 1.0, 0.0, 1.0], // Top face
				[1.0, 0.5, 0.5, 1.0], // Bottom face
				[1.0, 0.0, 1.0, 1.0], // Right face
				[0.0, 0.0, 1.0, 1.0]  // Left face
			];
			var unpackedColors = [];
			for (var i in colors) {
				var color = colors[i];
				//assign colors for each vertex of each face based on the packed representation above
				for (var j = 0; j < 4; j++) {
					unpackedColors = unpackedColors.concat(color);
				}
			}
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
			//every color has 4 values: red, green, blue and alpha (transparency: use 1.0 (opaque) for this demo)
			cubeVertexColorBuffer.itemSize = 4;
			//24 color values (we have 24 vertices to color...)
			cubeVertexColorBuffer.numItems = 24;
			//Index Buffer Object
			//it joins sets of vertices into faces
			cubeVertexIndexBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
			var cubeVertexIndices = [
				//this numbers are positions in the VBO array above
				0, 1, 2, 0, 2, 3,    // Front face
				4, 5, 6, 4, 6, 7,    // Back face
				8, 9, 10, 8, 10, 11,  // Top face
				12, 13, 14, 12, 14, 15, // Bottom face
				16, 17, 18, 16, 18, 19, // Right face
				20, 21, 22, 20, 22, 23  // Left face
			];
			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
			//we have one item - the cube
			cubeVertexIndexBuffer.itemSize = 1;
			//we have 36 indices (6 faces, every face has 2 triangles, each triangle 3 vertices: 2x3x6=36)
			cubeVertexIndexBuffer.numItems = 36;
		}
		//Helper Variables
		var rCube = 0;
		var xTrans = 0.0;
		var movDirection = true;
		var leftWasPressed;
		//array for keeping pressed keys
		var currentlyPressedKeys = {};
		//Keyboard handler
		function handleKeyDown(event) {
			currentlyPressedKeys[event.keyCode] = true;
			if (String.fromCharCode(event.keyCode) == "F") {
				filter += 1;
				if (filter == 3) {
					filter = 0;
				}
			}
		}
		//Keyboard handler
		function handleKeyUp(event) {
			currentlyPressedKeys[event.keyCode] = false;
		}
		//Key pressed callback
		//37,39 are the codes for the arrow keys
		//xTrans is used in the ModelView matrix for local transformation of the cube
		function handleKeys() {
			if (currentlyPressedKeys[37]) {
				// Left cursor key
				xTrans -= 0.1;
				leftWasPressed = 1;
			}
			if (currentlyPressedKeys[39]) {
				// Right cursor key
				xTrans += 0.1;
				leftWasPressed = 0;
			}
		}
		//For every frame this function draws the complete scene from the beginning
		function drawScene() {
			//the viewport gets the canvas values (that were assigned to the gl context variable)
			gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
			//the frame and depth buffers get cleaned (the depth buffer is used for sorting fragments)
			//without the depth buffer WebGL does not know which fragment is visible for a given pixel
			gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
			//the projection matrix (pMatrix) is set
			//45 degrees Field-Of-View
			//aspect ratio gl.viewportWidth / gl.viewportHeight
			//near plane: 0.1 , far plane: 100
			mat4.perspective(70, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
			//the modelview Matrix is initialized with the Identity Matrix
			mat4.identity(mvMatrix);
			//the ModelView matrix gets a global transformation ("camera" retracts 20 units)
			//otherwise the "camera" will be inside the rotating cube
			//z-axis points out of the screen. we translate -20 which is the inverse transform
			//in essence we move the world -20 units to have the camera 20 units forward.
			//REMEMBER there is no actual camera in WebGL
			mat4.translate(mvMatrix, [0.0, 0.0, -20.0]);

			//We use this if statement to control the direction of our robot depending on the pressed key.
            if(leftWasPressed){
	            mat4.rotate(mvMatrix, degToRad(180), [0, 1, 0]);
	            mat4.translate(mvMatrix,[-xTrans,0.0,0.0]);
            }else{
	            mat4.translate(mvMatrix,[xTrans,0.0,0.0]);
            }
			//-------------------------------------------HEAD-------------------------------------
			mvPushMatrix();
            //move the head up
			mat4.translate(mvMatrix, [0.0, 6.0, 0.0]);
            /*********************************************/
			//BIND BUFFERS!!!!!!!!!!!!
			//MUST BE DONE ONCE BEFORE DRAWING AN OBJECT
            /************************************************/
			//we bind the buffer for the cube vertices
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube colors
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube vertex indices
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
            /********************************************************************/
			//we update the uniforms for the shaders
			setMatrixUniforms();
			//we call the Draw Call of WebGL to draw the cube
			//Triangles mode
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
			//------------------------BODY----------------------------------------------------
			mvPushMatrix();
			//scale up the cube to create the robot's body
			mat4.scale(mvMatrix, [2.0, 5.0, 2.0]);
			mat4.rotate(mvMatrix, degToRad(90), [0, 1, 0]);
            /*********************************************/
			//BIND BUFFERS!!!!!!!!!!!!
			//MUST BE DONE ONCE BEFORE DRAWING AN OBJECT
            /************************************************/
			//we bind the buffer for the cube vertices
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube colors
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube vertex indices
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
            /********************************************************************/
			//we update the uniforms for the shaders
			setMatrixUniforms();
			//we call the Draw Call of WebGL to draw the cube
			//Triangles mode
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
			//------------------------LEFT ARM----------------------------------------------------
			mvPushMatrix();
			//move the cube up to rotate it and then move it down to create the illusion of the having an anchor point on the top part of the arm
			mat4.translate(mvMatrix, [0.0, 2.5, 2.2]);
			mat4.rotate(mvMatrix, degToRad(rCube), [0, 0, 1]);
			mat4.translate(mvMatrix, [0.0, -2.5, 0.0]);
			//scale the cube to create the robot's arm shape
			mat4.scale(mvMatrix, [0.4, 3.0, 0.4]);
			mat4.rotate(mvMatrix, degToRad(180), [0, 1, 0]);
            /*********************************************/
			//BIND BUFFERS!!!!!!!!!!!!
			//MUST BE DONE ONCE BEFORE DRAWING AN OBJECT
            /************************************************/
			//we bind the buffer for the cube vertices
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube colors
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube vertex indices
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
            /********************************************************************/
			//we update the uniforms for the shaders
			setMatrixUniforms();
			//we call the Draw Call of WebGL to draw the cube
			//Triangles mode
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
			//------------------------Right ARM----------------------------------------------------
			mvPushMatrix();
			//move the cube up to rotate it and then move it down to create the illusion of the having an anchor point on the top part of the arm
			mat4.translate(mvMatrix, [0.0, 2.5, -2.2]);
			mat4.rotate(mvMatrix, degToRad(rCube), [0, 0, -1]);
			mat4.translate(mvMatrix, [0.0, -2.5, 0.0]);
			//scale the cube to create the robot's arm shape
			mat4.scale(mvMatrix, [0.4, 3.0, 0.4]);
			mat4.rotate(mvMatrix, degToRad(270), [0, 1, 0]);
            /*********************************************/
			//BIND BUFFERS!!!!!!!!!!!!
			//MUST BE DONE ONCE BEFORE DRAWING AN OBJECT
            /************************************************/
			//we bind the buffer for the cube vertices
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube colors
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube vertex indices
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
            /********************************************************************/
			//we update the uniforms for the shaders
			setMatrixUniforms();
			//we call the Draw Call of WebGL to draw the cube
			//Triangles mode
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
			//------------------------Left Leg----------------------------------------------------
			mvPushMatrix();
			//move the cube up to rotate it and then move it down to create the illusion of the having an anchor point on the top part of the arm
			mat4.translate(mvMatrix, [0.0, -5.0, 1.0]);
			mat4.rotate(mvMatrix, degToRad(rCube), [0, 0, -1]);
			mat4.translate(mvMatrix, [0.0, -2.5, 0.0]);
			//scale the cube to create the robot's leg shape
			mat4.scale(mvMatrix, [0.4, 3.0, 0.4]);
			mat4.rotate(mvMatrix, degToRad(180), [0, 1, 0]);
            /*********************************************/
			//BIND BUFFERS!!!!!!!!!!!!
			//MUST BE DONE ONCE BEFORE DRAWING AN OBJECT
            /************************************************/
			//we bind the buffer for the cube vertices
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube colors
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube vertex indices
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
            /********************************************************************/
			//we update the uniforms for the shaders
			setMatrixUniforms();
			//we call the Draw Call of WebGL to draw the cube
			//Triangles mode
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
			//------------------------Right Leg----------------------------------------------------
			mvPushMatrix();
			//move the cube up to rotate it and then move it down to create the illusion of the having an anchor point on the top part of the arm
			mat4.translate(mvMatrix, [0.0, -5.0, -1.0]);
			mat4.rotate(mvMatrix, degToRad(rCube), [0, 0, 1]);
			mat4.translate(mvMatrix, [0.0, -2.5, 0.0]);
			//scale the cube to create the robot's arm shape
			mat4.scale(mvMatrix, [0.4, 3.0, 0.4]);
			mat4.rotate(mvMatrix, degToRad(270), [0, 1, 0]);
            /*********************************************/
			//BIND BUFFERS!!!!!!!!!!!!
			//MUST BE DONE ONCE BEFORE DRAWING AN OBJECT
            /************************************************/
			//we bind the buffer for the cube vertices
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube colors
			gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
			//we bind the buffer for the cube vertex indices
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
            /********************************************************************/
			//we update the uniforms for the shaders
			setMatrixUniforms();
			//we call the Draw Call of WebGL to draw the cube
			//Triangles mode
			gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			mvPopMatrix();
		}
		//Animate function
        //We use this function to create the animation of the robot's moving arms and leg.
        //When the 45 degree point is reached we animate it backwards until the -45 degree point is reached.
		function animate() {
			if (movDirection) {
				rCube++;
				if (rCube >= 45) {
					movDirection = !movDirection;
				}
			} else {
				rCube--;
				if (rCube <= -45) {
					movDirection = !movDirection;
				}
			}
		}
		//this is the requestAnimFrame callback
		//For every tick, request another frame
		//handle keyboard, draw the scene, animate (update animation variables) and continue
		function tick() {
			requestAnimFrame(tick);
			handleKeys();
			drawScene();
			if(currentlyPressedKeys[37] || currentlyPressedKeys[39]){
				animate();
			}
		}
		//Entry point of the WebGL context
		function webGLStart() {
			var canvas = document.getElementById("TUCWebGL");
			//Functions for initialization
			//Check above
			initGL(canvas);
			initShaders();
			initBuffers();
			//Background Color: Color assigned for all pixels with no corresponding fragments
			gl.clearColor(0.3, 0.3, 0.3, 1.0);
			//Enable z-buffer for depth sorting
			gl.enable(gl.DEPTH_TEST);
			//define the keyboard handlers
			document.onkeydown = handleKeyDown;
			document.onkeyup = handleKeyUp;
			//the first tick of our application
			tick();
		}
    </script>
</head>
<!-- HTML for the canvas element-->
<body onload="webGLStart();" style="background-color: #2e2e2e"> <!-- calls the entry point of our application -->
<canvas id="TUCWebGL" height="500" width="500"></canvas>
</body>
</html>